/*
 *  Copyright (c) 2010, Nathan Parry
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are
 *  met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *
 *  3. Neither the name of Nathan Parry nor the names of any
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 *  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 *  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 *  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 *  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
package com.nparry.orderly

import org.specs2.mutable._

import net.liftweb.json.JsonAST.JValue

import java.io._
import java.net.URI

/**
 * Make sure our parser produces the same result as the RI.
 */
class ReferenceImplTests extends Specification {

  "Parser" should {
    "produce the same output as the RI for valid input" in {
      ((locateOrderlyInput("referenceImpl/positive_cases") map {
        f=> (f, getExpectedOutput(f)) }).foldLeft(0) { (errorCount, files) =>
          try {
            val ourJson = OrderlyParser.parse(files._1)
            val riJson = Json.parse(files._2)
            jsonMatches(ourJson, riJson) match {
              case true => errorCount
              case false => {
                System.err.println("\nInput: " + files._1)
                System.err.println("Our JSON:")
                System.err.println(Json.prettyPrint(ourJson))
                System.err.println("\nRI JSON:")
                System.err.println(Json.prettyPrint(riJson))
                errorCount + 1
              }
            }
          } catch {
            case e:InvalidOrderly => {
              System.err.println("\nInput: " + files._1)
              System.err.println("Parsing failed!")
              errorCount + 1
            }
            case e:Exception => throw e
          }
        }
      ) mustEqual 0
    }


    /**
     * Make sure we reject the same cases as the RI. However, we don't try
     * to match the error messages generated by the RI.
     */
    "reject the same invalid input as the RI" in {
      locateOrderlyInput("referenceImpl/negative_cases") foreach { file =>
        OrderlyParser.parse(file) must throwAn[InvalidOrderly]
      }
      1 mustEqual 1 // Hack
    }
  }

  def locateOrderlyInput(s: String): Array[File] = {
    val a = filesForUri(uriForResourceDir(s)) filter { f => f.getAbsolutePath().endsWith(".orderly") }
    a.length match {
      case 0 => throw new Exception("No test input found in " + s)
      case _ => a
    }
  }

  def getExpectedOutput(f: File): File = {
    val expected = new File(f.getAbsolutePath.replace(".orderly", ".jsonschema"))
    expected.exists() match {
      case false => throw new Exception("Unable to find expected output for " + f)
      case _ => expected
    }
  }

  def uriForResourceDir(s: String): URI = Thread.currentThread().getContextClassLoader().getResources(s).nextElement().toURI()
  def filesForUri(uri: URI): Array[File] = new File(uri).listFiles()

  def jsonMatches(ourJson: JValue, riJson: JValue) = Json.prettyPrint(ourJson) == Json.prettyPrint(riJson)
}

